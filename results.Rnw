% !TeX root = dissertation.Rnw 

<<ResultsSetup,autodep=TRUE,echo=FALSE,cache=TRUE>>=
#sources
source('./data/getNames.R',local=TRUE)
source('./data/NameLookup.R',local=TRUE)
source('./data/getChromosomes.R',local=TRUE)
source('./data/BindChromosomes.R',local=TRUE)

#GDMO
data(GDMO)

GDMO<-GDMO[GDMO$strain!='iJO1366-anaerobic',] #experiment seems to have failed
GDMO<-GDMO[!(
  (GDMO$id==2005735200&GDMO$generation>740)|
    (GDMO$id==1003985200)|
    (GDMO$id==1727016800)|
    (GDMO$id==1961459700) 
),]#part written generation


GDMO.runs=aggregate(cbind(pop,generation)~strain+id,GDMO,max)
GDMO.runs$population=GDMO.runs$pop

#GDLS
data(GDLS)
GDLS.runs=unique(GDLS[,c('strain','id','nbhdsz','M')])
@


\chapter{Results}
This chapter details the results of the investigation, in terms of the properties of the design strategies used, and the biological properties of the strains designed.
\todo{section references}

\section{Technical Evaluation}
This section discusses each strategy individually, before comparing their relative merits.

\subsection{GDMO}
A number of different evolution runs were completed for each strain, summarised in table~\ref{tab:GDMOevals}. As can be seen, more evaluations were done for smaller population and generation sizes, in order to find the importance of these two factors on running time and performance.

<<GDMOevals,echo=FALSE,results='asis',dependson='ResultsSetup'>>=
require(xtable,quietly=TRUE)
GDMO.runs$population<-GDMO.runs$pop
print(xtable(
  GDMO.runs[,c('strain','population','generation')],
  caption='GDMO evaluations completed',
  label='tab:GDMOevals',
  display=c('d','s','d','d')
),include.rownames=FALSE)
@

\subsection{Convergence time}
The first property investigated was how quickly convergence to a stable solution was achieved. 
This is difficult for multi-objective optimization, since pareto fronts are not generally comparable.
\todo{check if hypervolume already defined}

Figure~\ref{fig:convergence} shows hypervolume against generation for a number of runs of GDMO. This shows that most convergence occured quickly---within \num{200} generations. 
This works out at around \Sexpr{mean(GDMO[GDMO$generation==200&GDMO$strain=='sulfurreducens','walltime'])}~\si{\second}.

The investigation of G. Sulfurreducens with \num{1000} generations in particular shows one of the disadvantages of an evolutionary algorithm, and many other global optimization algorithms: since the algorithm is constantly searching for a better solution, if we stop it at an arbitrary point then there is no guarantee that the solution at this point is the best available. 

<<convergence,,fig.pos='p',fig.cap='Convergence of evolution runs',cache=TRUE,dependson=c('hypervolume','ResultsSetup')>>=
GDMO.runs=GDMO.runs[order(GDMO.runs$strain,GDMO.runs$generation,GDMO.runs$pop),]
plot(NULL,NULL,
     xlab='generation',
     ylab='% hypervolume vs wt',
     ylim=c(100,105),
     xlim=c(0,max(GDMO$generation))
)
library('RColorBrewer',quietly=TRUE)
colours=c(
  brewer.pal(n=nrow(GDMO.runs[GDMO.runs$strain=='iaf1260-ac',]),name='Purples'),
  brewer.pal(n=nrow(GDMO.runs[GDMO.runs$strain=='metallireducens',]),name='Blues'),
  brewer.pal(n=nrow(GDMO.runs[GDMO.runs$strain=='sulfurreducens',]),name='Reds') 
)
legend('bottomright',
       paste(GDMO.runs$strain,' pop=',GDMO.runs$pop,' gen=',GDMO.runs$gen),
       col=colours,
       pch='l',
       cex=0.5)
natvol<-1  #due to normalization
for(j in 1:nrow(GDMO.runs)){
  w=GDMO[GDMO$id==GDMO.runs[j,'id'],]
  measureat = seq(1,max(w$generation),max(w$generation)%/%5)
  volume=sapply(measureat,function(i){
    hypervolumeMonteCarlo(
      w[w$generation==i,
        c('nbiomass','nmaxsyn','nminsyn')
        ],
      100 # must be > 1
    ) 
  })
  lines(measureat,volume*100,col=colours[j])
}
@
\nocite{Harrower2003}

To ensure that the final front is the best possible, three approaches are possible:
\begin{enumerate}
\item Simply take the maximum value. This is not ideal since the best pareto front overall may miss helpful solutions.
\item find the non-dominated front of the union of a number of good solutions. This approach was is relatively simple but effective and can be performed retrospectively. \label{enum:approachtaken}
\item A simulated annealing style approach where mutation rate decreases over time. I obtained an open-source version of the NSGA-II algorithm, the core of GDMO, and implemented this approach on this with an exponentially dropping mutation rate. Ultimately, I decided to take approach 2 to avoid the introduction of an unnecessary extra parameter.
\end{enumerate}
\todo{actually re-run code in order to find a better front}

Approach~\ref{enum:approachtaken} was taken, since this is effective without requiring modification to the core algoritm. At this stage this was used to select fronts for further analysis---for each strain the pareto front was found for the union of:
\todo{haven't actualy done this yet}
\begin{enumerate}
\item The front at generation 250 for a population of 1000 and
\item the front at generations \numlist{400;450;500} for a population of 500.
\end{enumerate}
<<results_subset_setup,eval=TRUE,cache=TRUE,dependson=c('dominated','ResultsSetup')>>=
GDMO.S=GDMO[GDMO$strain=='sulfurreducens'&GDMO$pop==500&GDMO$generation==500,]
GDMO.M=GDMO[GDMO$strain=='metallireducens'&GDMO$pop==500&GDMO$generation==500,]
@

<<methods_GDMO_subsets,cache=TRUE,dependson=c('dominated','ResultsSetup','results_subset_setup')>>=
#extract pareto fronts for each dimension
hs<-GDMO.S[,c('nbiomass','nmaxsyn')]
hs<-hs[!dominated(hs),]

ls<-GDMO.S[,c('nbiomass','nminsyn')]
ls<-ls[!dominated(ls),]

hm<-GDMO.M[,c('nbiomass','nmaxsyn')]
hm<-hm[!dominated(hm),]

lm<-GDMO.M[,c('nbiomass','nminsyn')]
lm<-lm[!dominated(lm),]
@

\todo{not necessarily here, but do write about 3d pareto fronts}

\subsubsection{Quality}
Solution quality can only really be evaluated in comparison with other techniques and with the literature.\todo{not done}

\subsection{GDLS}
The first stage of technical evaluation of GDLS is to find the effect of neighbourhood size and branching factor on the quality of solutions.
<<GDLS:solutionquality>>=

@


\subsection{Comparison}
Figure~\ref{fig:comparison} shows the results of the algorithms on one plot. 
The axes chosen are just maximum synthesis and biomass production, since these are what GDLs optimizes.
<<comparison,out.width='0.8\\linewidth',dependson='methods_GDMO_subsets'>>=
plot(nbiomass~nmaxsyn,hs,col='pink')
points(nbiomass~nmaxsyn,GDLS[GDLS$strain=='sulfurreducens',],col='red')
@
We can see that the solutions produced by GDLS are in the Pareto front, but that they do not achieve as high synthesis rates as GDMO. This is likely to be due to the inability of GDLs to make jumps over more than a certain number of knockouts.
\todo{find out knockout difference}

\section{Biological Evaluation}
The most interesting biological data was produced by GDMO, since this was able to show how the pathways altered varied with the solution properties.

\subsection{Geobacter Sulfurreducens}
\subsubsection{Fronts}
Figure~\ref{fig:sulfurreducensmax} shows a roughly linear tradeoff between maximum reduction potential and biomass generation is possible, up to a maximum of a \Sexpr{(max(hs$nmaxsyn))*100}~\si{\percent} of wild type yield, at the expense of \Sexpr{min(hs$nbiomass)}~\si{\percent} biomass production.
This is as expected, as the organism has a constant amount of energy available for either growth or electron exchange.

In figure~\ref{fig:sulfurreducensmin}, we again see an expected general negative gradient. 
However, only a small increase over wild type of \Sexpr{(max(ls$nminsyn))*100}~\si{\percent} was possible while maintaining viability.
This is likely to be because, while there are likely to be many knockouts that limit the energy that can be used in biomass generation, and so leave a surplus reduction potential, knockout strategies that actually force higher reduction require much more extensive modifications.
Figure~\ref{fit:sulfurreducensmin} shows a pronounced jump at around 0.935 in the biomass axis. This is discussed further in Section~\ref{sec:gskink}. \label{sec:gskinkfind}

<<sulfurreducensmax,out.width='0.8\\linewidth',dependson='methods_GDMO_subsets',fig.cap='Pareto front of maximum reduction potential for Geobacter Sulfurreducens, normalized against wild type'>>=
plot(nmaxsyn~nbiomass,hs,xlab='biomass',ylab='reduction potential')
@

<<sulfurreducensmin,out.width='0.8\\linewidth',fig.cap='Pareto front of minimum reduction potential for Geobacter Sulfurreducens, normalized against wild type',dependson='methods_GDMO_subsets'>>=
plot(nminsyn~nbiomass,ls,xlab='biomass',ylab='reduction potential')
@


\subsubsection{Knockouts}
<<results_GDMO_loadChromosomes,echo=FALSE,dependson=c('ResultsSetup','results_subset_setup')>>=
GDMO.S.chromosomes<-BindChromosomes(GDMO.S)
GDMO.M.chromosomes<-BindChromosomes(GDMO.M)
#principle components
require(stats,quietly=TRUE)
pc<-princomp(GDMO.S.chromosomes[,c('maxsyn','minsyn','biomass')])
GDMO.S.chromosomes$pos<-pc$scores[,1]
pc<-princomp(GDMO.M.chromosomes[,c('maxsyn','minsyn','biomass')])
GDMO.M.chromosomes$pos<-pc$scores[,1]
#prepare reaction list
GDMO.S.reactions=read.delim('./data/geo_s_react.txt',)
GDMO.M.reactions=read.delim('./data/geo_m_react.txt',)
@

One major advantage of GDMO is that the shape of the pareto front can yield information about the properties of pathways. 
Figure~\ref{fig:geoSknockouts} shows the knockouts in each member of the final population. 
Knockout vectors are ordered by the first principle component of their objectives, which lies along the Pareto front, while genes are ordered according to a manual subsystem clustering.

<<geoSknockouts, out.width='0.8\\linewidth', fig.cap='knockouts in G. Sulfurreducens'>>=
heatmap(x=as.matrix(GDMO.S.chromosomes[,1:212]*1),
        Rowv=GDMO.S.chromosomes$pos,
        Colv=cor(GDMO.S.chromosomes[1,1:212]),
        ylab='genes',
        xlab='strain'
)
@

Figure~\ref{fig:geoSknockouts} does show an obvious banding pattern in the gene axis, showing the essentiality of certain gene groups, and a slight trend in the strains as they move away from wild type.

\subsubsection{Minimum synthesis front shape}
In order to get deeper insight, we need to look at more focussed groups of strains;
Figure~\ref{fig:sulfurreducensmin} \label{sec:gskink} shows a pronounced kink in the biomass vs minimum synthesis Pareto front of G. Sulfurreducens. \todo{find these in chart}
To look at this in more detail, we can extract the relevant sets of strains and compare the their knockouts.
<<kinkanalysis, out.width='0.8\\linewidth', dependson=c('emthods_GDMO_subsets','results_GDMO_loadChromosomes')>>=
A <- merge(GDMO.S.chromosomes,ls) # A is all strains in the minsyn vs biomass pareto front
A <- A[0.92<A$nbiomass & A$nbiomass<0.94, ] # strains with 0.92 < biomass < 0.94
low <- A[A$nminsyn<1.003,grepl('GSU.*',colnames(A))]  # strains with synthesis < 1.003
high <- A[A$nminsyn>1.003,grepl('GSU.*',colnames(A))] # strains with synthesis > 1.003
diff <- colSums(high)-colSums(low)        #  knockout vector sets
k1 = head(diff[order(-abs(diff))],20)     # most relevant knockouts

heatmap(x=as.matrix(A[,1:212]*1),
        Rowv=NA,
        Colv=NULL,
        labRow=A$nminsyn,
        labCol=colnames(A[,1:212]),
        distfun=function(x){dist(x,'manhattan')}
)
@
Of course, just seeing the genes that are knocked out is not as helpful as seeing the actual reactions affected. To find these, we can refer back to the original gene annotations of the metabolic network.
<<dependson=c('results_GDMO_loadChromosomes')>>=
GDMO.S.reactions[GDMO.S.reactions$GeneAssociation %in% names(k1),c('OfficialName','Equation')]
@
\todo{find out if these should be synthetic lethal}

\subsubsection{Common modifications}
Another obvious comparison to make is to find the most common knockouts in the engineered strains.
<<>>=
#create wildtype
engineered <- GDMO.S.chromosomes[,grepl('GSU.*',colnames(GDMO.S.chromosomes))] # get engineered strains
diff <- colSums(engineered)        # numer of times each knockout was used
k2 = diff[order(-abs(diff))]
@
These can then be plotted to find the most important.
<<commonmodifications, out.width='0.8\\linewidth', fig.cap='Common modifications',>>=
plot(k2,xlab='modification index',ylab='usages')      # most common knockouts
abline(v=10)
@
This shows that 10 knockouts (to the left of the line) are highly common. These may be of particular intrest.
<<>>= 
GDMO.S.reactions[GDMO.S.reactions$GeneAssociation %in% names(head(k2,10)),c('OfficialName','Equation')]
@
\todo{plot knockouts onto genome indicies}

\todo{explain what i did with these knockouts}

\subsection{Geobacter Metallireducens}
\todo{some intro text to Geobacter Metallireducens}
\subsubsection{Fronts}
The general shape of the Pareto front in G. Metallireducens is shown in figure~\ref{m_fronts}.
<<m_fronts,out.width='0.8\\linewidth',fig.cap='G. Metallireducens Pareto Front'>>=
require('lattice',quietly=TRUE)
m<-GDMO[GDMO$strain=='metallireducens'&GDMO$generation==500&GDMO$pop==500,]
cloud(m$nbiomass~m$nmaxsyn*m$nminsyn)
@
The Pareto front for G. Metallireducens electricity production shown in figure ~\ref{m_fronts} is appears to be almost completely linear, which was to start with extremely suprising, and suggested that some error had been made---one does not expect that random knockouts would be able to achieve such a precise tradeoff. To verify this shape, a number of comparisons were made with the G. Sulfurreducens model.
<<straight_line_verification1,fig.pos='p',fig.cap='verification of G. Metallireducens Pareto Front',fig.pos='p'>>=
layout(matrix(1:8,4,2,byrow=F))
for(strain in c('sulfurreducens','metallireducens')){
  colour <- switch(strain,
                   sulfurreducens='red',
                   metallireducens='blue')
  a<-GDMO[GDMO$strain==strain&GDMO$pop==500,]
  b<-a[sample(nrow(a),500),]
  plot(knockouts~generation,b,main=unique(strain),sub='knockouts vs time',pch='.',col=colour)
  plot(nbiomass~generation,b,ylim=c(0,1),sub='biomass vs time',pch='.',col=colour)
  plot(nmaxsyn~generation,b,ylim=c(1,1.05),sub='maximum synthesis vs time',pch='.',col=colour)
  plot(nminsyn~generation,b,ylim=c(0,1.05),sub='minimum synthesis vs time',pch='.',col=colour)
}
@

<<straight_line_verification2,fig.cap='PCA of Pareto Fronts'>>=
layout(matrix(1:2,1,2,byrow=F))
for(strain in c('sulfurreducens','metallireducens')){
  colour <- switch(strain,
                   sulfurreducens='red',
                   metallireducens='blue')
  c<-GDMO[GDMO$strain==strain
          &GDMO$pop==500
          &GDMO$generation==500,]
  plot(princomp(c[,c('nbiomass','nminsyn','nmaxsyn')]),
       sub='principle components',
       main=unique(strain),
       col=colour
  )
}
@
\todo{add colours}
Figures~\ref{straight_line_verification1,straight_line_verification2} show a number of graphs that all suggest that there is no bug in the G. Metallireducens model. 
Figure~\ref{straight_line_verification1} shows that the noise levels over time are similar; while there are some differences in minimum synthesis, closer inspection reveals that there is still some variation for G. Metallireducens, and the difference is not particularly large considering that only small improvments are at all possible in this objective.
Figure~\ref{straight_line_verification2} shows the principle components of both fronts. 
Both fronts are roughly linear, so the first principle components explain much of the variation, but it in fact explains a slightly smaller proportion of variance in the G. Metallireducens pareto front.

With further investigation, the reasons behind these differences actually indicate a problem with the G. Sulfurreducens model. 
In both species, we see a tradeoff between use of resources in biomass generation and in electricity production.
However, the G. Sulfurreducens model required the addition of a small number of `vitamins': trace materials in the substrate that were not produced in the metabolism.
These extra resources cannot necessarily be used outside of specific pathways, and so they produce extraneous local features in the pareto front where they can, or cannot, be used.

\subsubsection{Minimum Synthesis Pattern}
Figure~\ref{minsynMpattern} demonstrates that in the final G.Metallireducens pareto front, maximum and minimum synthesis are for the most part correlated. However, pushing the maximum synthesis above around \SI{102.5}{\percent} of the wild type value produces a large drop in minimum synthesis. Since this very large drop is undesirable, we will remove it from the Pareto front.
<<minsynMpattern, out.width='0.8\\linewidth', dependson=c('GDMO_M'),fig.cap='A large penalty in minimum synthesis occurs for very high values of maximum synthesis'>>=
plot(nminsyn~nmaxsyn,GDMO.M,ylab='normalized minimum synthesis',xlab='normalized maximum synthesis')
@

<<GDMO_M_chromosomes2,dependson=c('results_GDMO_loadChromosomes','results_subset_setup')>>=
GDMO.M<-GDMO.M[GDMO.M$nmaxsyn<1.025,]
GDMO.M.chromosomes<-GDMO.M.chromosomes[GDMO.M.chromosomes$nmaxsyn<1.025,]
pc<-princomp(GDMO.M.chromosomes[,c('maxsyn','minsyn','biomass')])
GDMO.M.chromosomes$pos<-pc$scores[,1]
@


\subsubsection{Knockout Patterns}
Figure~\ref{fig:geoMknockouts} shows the global knockout pattern in G.Metallireducens at the pareto front. Strains are ordered by their distance along the first principle component of the objective values (which covers \SI{96}{\percent} of variance), while genes are hierachically clustered, using Manhattan distance. Axes are absent for the sake of readability and because neither is legible on its own.
<<geoMknockouts, out.width='0.8\\linewidth', dependson=c('GDMO_M_chromosomes2'), fig.cap='knockouts (blue) in G. Metallireducens'>>=
GDMO.M.chromosomes<-GDMO.M.chromosomes[sort.list(GDMO.M.chromosomes.pos)]
heatmap(x=as.matrix(GDMO.M.chromosomes[,grep('Gmet_.*',names(GDMO.M.chromosomes))]*1),
        Rowv=NA,
        Colv=cor(GDMO.M.chromosomes[,grep('Gmet_.*',names(GDMO.M.chromosomes))]),
        labRow=NA,
        ylab='strain',
        labCol=NA,
        xlab='gene',
        col=c('ghostwhite','blue'),
        distfun=function(x){dist(x,'manhattan')}
)
@
Here we can see a large number of essential genes---those with no knockouts. 
This forms a larger proportion of the genes visible here than in Sulfurreducens, which may be partly due to the supplementation strategy in Sulfurreducens, but could also be simply due to bias in the derivation of the models.
Regardless, there is no reason to suppose that this essential gene list is different to those already known~\ref{Sun2009}, and it is not of interest in finding important knockout strategies, so all essential genes were removed.
<<GDMO_M_nonessential,dependson=c('GDMO_M_chromosomes2')>>=
GDMO.M.nonessential<-GDMO.M.chromosomes[,colSums(GDMO.M.chromosomes)!=0]
GDMO.M.nonessential<-GDMO.M.nonessential[sort.list(GDMO.M.nonessential$pos),]
@
The next step was to detect individually important knockouts. These were taken to be those whos presence in a strain is strongly related to the position of that strain in the first principle component of its objectives.
<<geoMKOtrendslinear, out.width='0.8\\linewidth', fig.pos='p', dependson=c('GDMO_M_nonessential'),fig.scap='Linearly smoothed knockouts',fig.cap='knockouts for each geneset in the pareto front for G. Metallireducens, smoothed by a linear model. Larger x-axis numbers have larger biomass production'>>=
plot(NULL,NULL,
     xlab='1st principle component of objectives',
     ylab='knockouts',
     main='linear model smoothed knockouts',
     xlim=range(GDMO.M.nonessential$pos),
     ylim=c(0,1)
)
for(k in grep('Gmet_.*',names(GDMO.M.nonessential),value=TRUE)){
  interaction<-GDMO.M.nonessential[,c(k,'pos')]
  interaction.fit<-lm(interaction[[k]]~pos,interaction)
  interaction$smoothed<-predict(interaction.fit)
  lines(smoothed~pos,interaction,col='blue')
}
@

Figure~\ref{fig:geoMKOtrendslinear} shows how the presence of gene sets varies with their position in the G. Metallireducens pareto front. 
The linear model used for smoothing shows that a number of knockouts are common in high biomass strains (towards the right), but are much less common in high synthesis strains, while the tendency in synthesis-favouring knockouts is less severe.

<<geoMKOtrendsloess, out.width='0.8\\linewidth', fig.pos='p', dependson=c('GDMO_M_nonessential'),fig.scap='Polynomial smoothed knockouts',fig.cap='knockouts for each geneset in the pareto front for G. Metallireducens, smoothed by a polynomial model'>>=
plot(NULL,NULL,
     xlab='1st principle component of objectives',
     ylab='knockouts',
     xlim=range(GDMO.M.nonessential$pos),
     ylim=c(0,1)
)
for(k in grep('Gmet_.*',names(GDMO.M.nonessential),value=TRUE)){
  interaction<-GDMO.M.nonessential[GDMO.M.nonessential$pos>-5,c(k,'pos')]
  interaction.fit<-loess(interaction[[k]]~pos,interaction,degree=2)
  interaction$smoothed<-predict(interaction.fit)
  lines(smoothed~pos,interaction,type='l',col='blue')
}
@

Figure~\ref{fig:geoMKOtrendsloess} shows a similar plot, but with smoothing provided by a local regression~\ref{Cleveland1979}. 
Using local regression allows this figure to pick up on more complex behaviours than the linear model.
\todo{actually decide on some knockout vectors}


\todo{cite colorbrewer}
\subsection{Escherichia coli}
Since iJO1366 is the superset of iAF1260, and more faithful to the real metabolic network of E. Coli, this will be discussed here unless otherwise stated.

<<ecoli.data>>=
iJO1366.anaerobic<-GDMO[GDMO$strain=='iJO1366-anaerobic',]
@

\subsubsection{Front shape}
\todo{something going seriously wrong}


\todo{check for replication of known strategies in E.coli}
