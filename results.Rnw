% !TeX root = dissertation.Rnw 

<<ResultsSetup,autodep=TRUE,echo=FALSE,cache=TRUE>>=
#sources
require(stats,quietly=TRUE)

#GDMO
data(GDMO)

GDMO<-GDMO[GDMO$strain!='iJO1366-anaerobic',] #experiment seems to have failed
GDMO<-GDMO[!(
  (GDMO$id==2005735200&GDMO$generation>740)|
    (GDMO$id==1003985200)|
    (GDMO$id==1727016800)|
    (GDMO$id==1961459700) 
),]#part written generation


GDMO.runs=aggregate(cbind(pop,generation)~strain+id,GDMO,max)
GDMO.runs$population=GDMO.runs$pop

#GDLS
data(GDLS)
GDLS<-GDLS
GDLS.runs=unique(GDLS[,c('strain','id','nbhdsz','M')])
@


\chapter{Results}
This chapter details the results of the investigation. First the technical evaluation focuses on the properties of GDMO and GDLS themselves. Then the biological evaluation discusses the synthesis possible with both Geobacter models, the knockout strategies that were used, and the results of using GDMO for evaluating potential knockins from E. Coli.

\section{Technical Evaluation}
This section focuses on the relative merits of GDMO and GDLS, and why GDMO was chosen for further use.
First the convergence behaviour of both algorithms is evaluated, to ensure that the comparison is as fair as possible; secondly the solutions from both techniques are compared.
The comparisons performed here are based on G. Sulfurreducens.
It was confirmed that the results remained valid with G. Metallireducens and the iAF1260 E. Coli model.

\subsection{GDMO}
A number of different evolution runs were completed for each strain, summarised in table~\ref{tab:GDMOevals}. As can be seen, more evaluations were done for smaller population and generation sizes, since these gave far shorter running times.

<<GDMOevals,results='asis',dependson='ResultsSetup',echo=FALSE>>=
require(xtable,quietly=TRUE)
GDMO.runs$population<-GDMO.runs$pop
print(xtable(
  GDMO.runs[,c('strain','population','generation')],
  caption='GDMO evaluations completed',
  label='tab:GDMOevals',
  display=c('d','s','d','d')
),include.rownames=FALSE)
@

Measurement of convergence is difficult for multi-objective optimization, since Pareto fronts are not generally comparable.
A number of techniques have been proposed for comparison, but as discussed in section~\ref{hypervolume}, the heuristic used here is hypervolume, calculated by Monte-Carlo integration.

Figure~\ref{fig:convergence} shows hypervolume against generation for a number of runs of GDMO. This shows that convergence occurred quickly---within \num{200} generations. 
This works out at around \Sexpr{signif(mean(GDMO[GDMO$generation==200&GDMO$strain=='sulfurreducens','walltime'])/3600,2)}~\si{\hour}.

This result was verified by looking at each objective in turn.
Minimum synthesis converged far slower than maximum synthesis, but both had converged by \numrange{200}{250} generations, lending support to the use of hypervolume as a measure of convergence, and providing reassurance that the numbers of generations chosen were sufficient.

<<convergence,echo=F,fig.pos='p',fig.cap='Convergence of evolution runs',cache=TRUE,dependson=c('hypervolume','ResultsSetup')>>=
GDMO.runs=GDMO.runs[order(GDMO.runs$strain,GDMO.runs$generation,GDMO.runs$pop),]
plot(NULL,NULL,
     xlab='generation',
     ylab='% hypervolume vs wt',
     ylim=c(100,105),
     xlim=c(0,max(GDMO$generation))
)
library('RColorBrewer',quietly=TRUE)
colours=c(
  brewer.pal(n=nrow(GDMO.runs[GDMO.runs$strain=='iaf1260-ac',]),name='Greens'),
  brewer.pal(n=nrow(GDMO.runs[GDMO.runs$strain=='metallireducens',]),name='Blues'),
  brewer.pal(n=nrow(GDMO.runs[GDMO.runs$strain=='sulfurreducens',]),name='Reds') 
)
legend('bottomright',
       paste(GDMO.runs$strain,' pop=',GDMO.runs$pop,' gen=',GDMO.runs$gen),
       col=colours,
       pch='l',
       cex=0.5)
natvol<-1  #due to normalization
for(j in 1:nrow(GDMO.runs)){
  w=GDMO[GDMO$id==GDMO.runs[j,'id'],]
  measureat = seq(1,max(w$generation),max(w$generation)%/%5)
  volume=sapply(measureat,function(i){
    hypervolumeMonteCarlo(
      w[w$generation==i,
        c('nbiomass','nmaxsyn','nminsyn')
        ],
      100 # must be > 1
    ) 
  })
  lines(measureat,volume*100,col=colours[j])
}
@
\nocite{Harrower2003}

The investigation of G. Sulfurreducens with \num{1000} generations in particular shows one of the disadvantages of an evolutionary algorithm, and many other global optimization algorithms: since the algorithm is constantly searching for a better solution, if we stop it at an arbitrary point then there is no guarantee that the solution at this point is the best available. 

To ensure that the final front is the best possible, three approaches are possible:
\begin{enumerate}
\item Simply take the maximum value. This is not ideal since the best Pareto front overall may miss helpful solutions.
\item Find the non-dominated front of the union of a number of good solutions. This approach is relatively simple but effective and can be performed retrospectively. \label{enum:approachtaken}
\item A simulated annealing style approach where mutation rate decreases over time. I trialed this approach by obtaining an open-source version of the NSGA-II algorithm, the core of GDMO, and modifying it to use an exponentially dropping mutation rate.
\end{enumerate}

Ultimately approach~\ref{enum:approachtaken} was taken, since this is effective without requiring modification to the core algorithm. At this stage this was used to select fronts for further analysis---for each strain the Pareto front was found for the union of:
\begin{enumerate}
\item The front at generation 250 for a population of 1000, and
\item The front at generation 500 for a population of 500.
\end{enumerate}
<<GDMO_S,echo=F,eval=TRUE,cache=TRUE,dependson=c('dominated','ResultsSetup')>>=
source('./data/getNames.R',local=TRUE)
source('./data/NameLookup.R',local=TRUE)
source('./data/getChromosomes.R',local=TRUE)
source('./data/BindChromosomes.R',local=TRUE)
source('./data/natural.R')
GDMO.S=GDMO[GDMO$strain=='sulfurreducens' 
            & (
              (GDMO$pop==500 & GDMO$generation==500)
              |(GDMO$pop==1000 & GDMO$generation==250)
            ), ]
GDMO.S.chromosomes<-BindChromosomes(GDMO.S)
GDMO.S.nondom<-!dominated(GDMO.S[,c('nbiomass','nmaxsyn','nminsyn')])
GDMO.S<-GDMO.S[GDMO.S.nondom,]
GDMO.S.chromosomes.nondom<-!dominated(
  GDMO.S.chromosomes[,c('biomass','maxsyn','minsyn')]
  )
GDMO.S.chromosomes<-GDMO.S.chromosomes[GDMO.S.chromosomes.nondom,]
pc<-princomp(GDMO.S.chromosomes[,c('maxsyn','minsyn','biomass')])
GDMO.S.chromosomes$pos<-pc$scores[,1]
GDMO.S.reactions=read.delim('./data/geo_s_react.txt',)
save(GDMO.S,GDMO.S.chromosomes,file='./data/GDMO_S')
@
<<GDMO_M,echo=F,eval=TRUE,cache=TRUE,dependson=c('dominated','ResultsSetup')>>=
source('./data/getNames.R',local=TRUE)
source('./data/NameLookup.R',local=TRUE)
source('./data/getChromosomes.R',local=TRUE)
source('./data/BindChromosomes.R',local=TRUE)
source('./data/natural.R')
GDMO.M=GDMO[GDMO$strain=='metallireducens' 
            & (
              (GDMO$pop==500 & GDMO$generation==500)
              |(GDMO$pop==1000 & GDMO$generation==250)
            ), ]
GDMO.M.chromosomes<-BindChromosomes(GDMO.M)
GDMO.M.nondom<-!dominated(GDMO.M[,c('nbiomass','nmaxsyn','nminsyn')])
GDMO.M<-GDMO.M[GDMO.M.nondom,]
GDMO.M.chromosomes.nondom<-!dominated(
  GDMO.M.chromosomes[,c('biomass','maxsyn','minsyn')]
  )
GDMO.M.chromosomes<-GDMO.M.chromosomes[GDMO.M.chromosomes.nondom,]
pc<-princomp(GDMO.M.chromosomes[,c('maxsyn','minsyn','biomass')])
GDMO.M.chromosomes$pos<-pc$scores[,1]
GDMO.M.reactions=read.delim('./data/geo_m_react.txt',)
save(GDMO.M,GDMO.M.chromosomes,file='./data/GDMO_M')
@

And, from these three dimensional Pareto fronts, the Pareto fronts were calculated for pairs of objectives.

<<GDMO_fronts,cache=TRUE,dependson=c('dominated','ResultsSetup','GDMO_S','GDMO_M')>>=
#extract Pareto fronts for each dimension
hs<-GDMO.S[,c('nbiomass','nmaxsyn')]
hs<-hs[!dominated(hs),]

ls<-GDMO.S[,c('nbiomass','nminsyn')]
ls<-ls[!dominated(ls),]

hm<-GDMO.M[,c('nbiomass','nmaxsyn')]
hm<-hm[!dominated(hm),]

lm<-GDMO.M[,c('nbiomass','nminsyn')]
lm<-lm[!dominated(lm),]
@

\subsection{GDLS}
The knockout strategies returned by GDLS provided a maximum synthesis of \Sexpr{data(GDLS);signif(max(GDLS[GDLS$strain=='sulfurreducens','nmaxsyn'])*100,4)}~\si{\percent} of the wild type value. This was possible using a small neighbourhoodsize (nbhdsz) of 3 and branching factor (M) of 1, as shown in Figure~\ref{fig:GDLS_solutionquality}.
GDLS was not able to improve upon this even with parameters that allowed it to explore a much larger region (the parameter sets used are shown in table~\ref{tab:GDLSevals}). 

<<GDLSevals,echo=F,results='asis',dependson=c('ResultsSetup')>>=
library(xtable,quietly=TRUE)
data(GDLS)
GDLS.runs=unique(GDLS[,c('strain','nbhdsz','M')])
print(xtable(
  GDLS.runs[,c('strain','nbhdsz','M')],
  caption='GDLS evaluations completed',
  label='tab:GDLSevals',
  display=c('d','s','d','d')
  ),include.rownames=FALSE)
@

<<GDLS_solutionquality,echo=F,fig.cap='Solutions found by GDLS',dependson=c('ResultsSetup')>>=
data(GDLS)
cloud(nmaxsyn~nbhdsz+M,
      GDLS,
      default.scales=list(arrows=F),
      col='red',
      zlab=list('normalized maximum synthesis',rot=90),
      xlab='neighbourhood size',
      ylab='Branches',
      scales = list(arrows=FALSE, col = "black"),
      par.settings=list(axis.line = list(col = "transparent"))
)
@

\subsection{Comparison}
Figure~\ref{fig:comparison} shows the results of the algorithms on one plot. 
The axes chosen are just maximum synthesis and biomass production, since these are what GDLs optimizes.
<<comparison,echo=F,fig.cap='Geobacter Sulfurreducens Pareto front, overlaid with GDLS results',dependson='GDMO_fronts'>>=
plot(nbiomass~nmaxsyn,hs,col='pink',pch='o')
points(nbiomass~nmaxsyn,GDLS[GDLS$strain=='sulfurreducens',],col='darkred',pch='x')
legend(
  'topright',
  legend=c('GDMO','GDLS'),
  pch=c('o','x'),
  col=c('pink','darkred')
)
@
We can see that the solutions produced by GDLS are in the Pareto front, and that both algorithms found an optimal solution in terms of maximum synthesis, though GDMO found several solutions with this maximum synthesis value, and some had a higher minimum synthesis value.

GDMO took large amounts of time to find some solutions, up to a maximum of \Sexpr{signif(max(GDMO[GDMO$strain=='sulfurreducens','cputime'],3)/3600)}~\si{\hour} of CPU time in one case, compared to a maximum of \Sexpr{max(GDLS[GDLS$strain=='sulfurreducens','cputime'])/60}~\si{minute} for GDLS\footnote{both used the same computer and optimization package, and this comparison is restricted to G. Sulfurreducens}.
However, GDMO took only \Sexpr{min(GDMO[GDMO$strain=='sulfurreducens'&GDMO$nmaxsyn>1.014673,'cputime'])}~\si{\second} of (amortized) CPU time to find a solution that was as good as the best provided by GDLS.

The fact that both solutions fairly quickly found good solutions, but could not easily surpass them, indicates that this may be a global optimum.

Since GDMO provided benefit of describing the whole Pareto front, and time scale did not appear to be an issue, GDMO was chosen for use from this point forwards.

\section{Biological Evaluation}
The biological component of the evaluation discusses the shapes of the Pareto fronts obtained using GDMO, and the knockouts used to create them.
To avoid repetition the G. Metallireducens section focuses more strongly on knockout patterns since although the patterns in both species were investigated extensively, these patterns may be more biologically relevant.

\subsection{Geobacter Sulfurreducens}

\subsubsection{Fronts}
Figure~\ref{fig:sulfurreducensfronts} (Maximum) shows that a roughly linear tradeoff between maximum reduction potential and biomass generation is possible, up to a maximum of a \Sexpr{(max(hs$nmaxsyn))*100}~\si{\percent} of wild type yield, at the expense of \Sexpr{min(hs$nbiomass)}~\si{\percent} biomass production.
This is as expected, as the organism has a constant amount of energy available for either growth or electron exchange.

In figure~\ref{fig:sulfurreducensfronts} (Minimum), we again see an expected general negative gradient. 
However, only a small increase over wild type of \Sexpr{(max(ls$nminsyn))*100}~\si{\percent} was possible while maintaining viability.
This is likely to be because, while there are likely to be many knockouts that limit the energy that can be used in biomass generation, and so leave a surplus reduction potential, knockout strategies that actually force higher reduction require much more extensive modifications.
Figure~\ref{fig:sulfurreducensfronts} (Minimum) shows a pronounced jump at around 0.935 in the biomass axis, discussed further in the next section.

<<sulfurreducensfronts,fig.width=8,fig.height=4,echo=F,dependson='GDMO_fronts',fig.cap='Pareto fronts of reduction capacity for Geobacter Sulfurreducens, normalized against wild type. Note scales not equal'>>=
layout(matrix(1:2,1,2,byrow=F))
plot(nmaxsyn~nbiomass,hs,xlab='biomass',ylab='Iron(II) excretion',col='red',main='(Maximum)')
plot(nminsyn~nbiomass,ls,xlab='biomass',ylab='Iron(II) excretion',col='red',main='(Miniumum)')
@

\subsubsection{Minimum Synthesis Knockouts}
In order to get deeper insight, we need to look at more focused groups of strains.
Figure~\ref{fig:sulfurreducensfronts} (Minimum) shows a `knee' in the biomass vs minimum synthesis Pareto front of G. Sulfurreducens.
To look at this in more detail, we can extract the relevant sets of strains and compare their knockouts.
<<kinkanalysis, echo=c(1:8,16:17), dependson=c('GDMO_S','GDMO_fronts'),fig.cap='Knockouts across jump in Geobacter Sulfurreducens minimum synthesis Pareto front'>>=
A <- merge(GDMO.S.chromosomes,ls) 
A <- A[0.92<A$nbiomass & A$nbiomass<0.94, ]
low <- A[A$nminsyn<1.003,grepl('GSU.*',colnames(A))]
high <- A[A$nminsyn>1.003,grepl('GSU.*',colnames(A))]
diff <- colSums(high)-colSums(low)
k1 = head(diff[order(-abs(diff))],20)

heatmap(x=as.matrix(A[,grep(pattern='GSU.*',colnames(A))]*1),
        Rowv=NA,
        Colv=NULL,
        labRow=NA,
        col=c('ghostwhite','red'),
        labCol=NA,
        ylab='strain, sorted by distance from WT',
        xlab='gene, clustered by Manhattan distance',
        distfun=function(x){dist(x,'manhattan')}
)
@
Heatmap~\ref{kinkanalysis} shows that there are two clearly different patterns of gene activation on either side of the jump.
Of course, just seeing the genes that are knocked out is not as helpful as seeing the actual reactions affected. To find these, we can refer back to the original gene annotations of the metabolic network: table~\ref{tab:kinkanalysis} shows the reactions affected. 
There is not room here to detail the reactions fully in this table, but we can see that knockouts in the Amino Acid Metabolism sub-system are selected for here. 
This is as expected: while general disruption to biomass creation can free energy for \ce{FE2} production and increase maximum synthesis, increases in minimum synthesis must occur by actually coupling \ce{FE2} synthesis and biomass production, as seen here.

<<dependson=c('GDMO_S'),echo=F,results='asis'>>=
print(xtable(
GDMO.S.reactions[GDMO.S.reactions$GeneAssociation %in% names(k1),c('Abbreviation','SubSystem')],
label='tab:kinkanalysis',
caption='reactions knocked out across jump in Sulfurreducens minimum synthesis front'
))
@

\subsubsection{Knockouts}
One major advantage of GDMO is that the shape of the Pareto front can yield information about the properties of pathways. 
Figure~\ref{fig:geoSknockouts} shows the knockouts in each member of the final population. 
Knockout vectors are ordered by the first principle component of their objectives, which lies along the Pareto front, while genes are heirachically clustered using Manhattan distance.

<<geoSknockouts, echo=F,  fig.cap='knockouts in Geobacter Sulfurreducens',dependson=c('GDMO_S')>>=
v=GDMO.S.chromosomes[order(GDMO.S.chromosomes$pos),
                     grep(pattern='GSU.*',
                          colnames(GDMO.S.chromosomes)
                          )
                     ]
heatmap(x=as.matrix(v*1),
        Rowv=NA,
        Colv=NULL,
        labRow=NA,
        labCol=NA,
        ylab='strain, sorted by distance from WT',
        xlab='gene, clustered by Manhattan distance',
        col=c('ghostwhite','red'),
        scale='none',
        distfun=function(x){dist(x,'manhattan')}
)
@

Figure~\ref{fig:geoSknockouts} does show an obvious banding pattern in the gene axis, showing the essentiality of certain gene groups, and a slight trend of more knockouts in the strains as synthesis increases at the expense of biomass generation.
Knockouts are discussed in more detail with respect to G. Metallirducens, due to concerns about the realism of the Sulfurreducens model.

\subsubsection{Common Modifications}
Another obvious comparison to make is to find the most common knockouts in the engineered strains, and plot them to find the most important (Figure~\ref{fig:commonmodifications}).
<<k2,dependson=c('GDMO_S')>>=
#create wildtype
engineered <- GDMO.S.chromosomes[,grepl(
  'GSU.*',
  colnames(GDMO.S.chromosomes)
  )] # get engineered strains
diff <- colSums(engineered)
k2 = diff[order(-abs(diff))]
@

<<commonmodifications, echo=F,  fig.cap='Common knockouts in Geobacter Sulfurreducens',dependson=c('k2')>>=
plot(k2,xlab='modification index',ylab='usages') 
abline(v=10)
@

Figure~\ref{fig:commonmodifications} shows that 10 knockouts (to the left of the line) are highly common. These may be of particular interest, and the associated reactions are detailed in table~\ref{tab:GDMO_S_overrepresented}. We can see that a large number of these reactions are associated with central metabolism. One hypothesis is that knockouts are forcing less efficient breakdown of metabolites, so that more electrons must be removed per unit biomass gain. The most strongly selected for knockout in particular is performed by Acetate Kinase, and associated with carbohydrate excretion, so this knockout perhaps forces more carbohydrate breakdown, freeing more electrons.

<<GDMO_S_overrepresented,echo=F,dependson=c('GDMO_S'),results='asis'>>= 
print(xtable(
  GDMO.S.reactions[GDMO.S.reactions$GeneAssociation %in% names(head(k2,10)),c('Abbreviation','SubSystem')],
  caption='Geobacter Sulfurreducens high knockout reactions',
  label='tab:GDMO_S_overrepresented',
  ),include.rownames=FALSE)
@

\subsubsection{Position of Knockouts on Genome}
Dr. Loveley, who discovered Geobacter, and Dr. Aklujkar, both of the University of Massachusetts Amherst,  were able to provide the latest annotations of the Geobacter Sulfurreducens genome.
Using these annotations, the knockouts found could be plotted against their position on the genome, to find out if modifications associated with high synthesis were biased towards any particular area of the G. Sulfurreducens genome.

<<genomeposition,dependson=c('GDMO_S'),fig.cap='Geobacter Sulfurreducens Knockouts along genome. Red is number of times knocked out. Dark Red is smoothed.'>>=
PCA<-read.delim('./data/PCA_Reannotation_02_20_13.csv')
PCA$Locus_tag<-as.character(PCA$Locus_tag)
PCA$centres<-(PCA$Corrected.Start+PCA$Corrected.Stop)/2
PCA$width<-PCA$Corrected.Stop-PCA$Corrected.Start

sums=colSums(GDMO.S.chromosomes[,grepl('GSU.*',colnames(GDMO.S.chromosomes))])
names=strsplit(names(sums),'_OR_')
names=setNames(names,names(sums))
PCA$KOs<-0
for(name in names(sums)){
   PCA[PCA$Locus_tag %in% unlist(names[name]),'KOs']<-(sums[name]/length(names[name]))+PCA[PCA$Locus_tag %in% unlist(names[name]),'KOs']
}

plot(KOs~centres,PCA[PCA$KOs>0,],log='y',type='p',col='red',xlab='genome position',ylab='log(KOs)')
lines(predict(loess(PCA$KOs~PCA$centres))~PCA$centres,col='darkred')
@

In Figure~\ref{genomeposition}, we can see that the smoothed line across the genome exhibits a 5 fold increase from end to end, and that this is mainly due to an increase in density of knocked out genes, rather than due to any outlying highly knocked out genes.

This grouping is likely to be due to similarities in functionality between nearby genes.


\subsection{Geobacter Metallireducens}
Section~\ref{sec:geoMfronts} describes how, despite some initial concerns, the Metallireducens metabolic model appears to be superior to the Sulfurreducens model, so the knockout strategies found in this model are discussed more thoroughly.

\subsubsection{Fronts}
\label{sec:geoMfronts}
The general shape of the Pareto front in G. Metallireducens is shown in figure~\ref{fig:m_fronts}.
<<m_fronts,echo=F,fig.cap='Geobacter Metallireducens Pareto Front'>>=
require('lattice',quietly=TRUE)
cloud(nbiomass~nmaxsyn*nminsyn,GDMO.M,
      par.settings=list(axis.line = list(col = "transparent")),
      col='blue',
      scales = list(arrows=FALSE, col = "black")
)
@
The Pareto front for G. Metallireducens electricity production shown in figure~\ref{fig:m_fronts} appears to be almost completely linear, which was to start with extremely surprising, and suggested that some error had been made---one does not expect that random knockouts would be able to achieve such a precise tradeoff. To verify this shape, a number of comparisons were made with the G. Sulfurreducens model.
<<straight_line_verification1,fig.pos='p',fig.cap='Verification of Geobacter Metallireducens Pareto Front',fig.pos='p',dependson=c('GDMO_M','GDMO_S')>>=
layout(matrix(1:8,4,2,byrow=F))
for(a in list(GDMO[GDMO$strain=='metallireducens',],
              GDMO[GDMO$strain=='sulfurreducens',]
              )){
  colour <- switch(unique(as.character(a$strain)),
                   sulfurreducens='red',
                   metallireducens='blue')
  b<-a[sample(nrow(a),500),]
  plot(knockouts~generation,b,main=unique(b$strain),
       sub='knockouts vs time',pch='.',col=colour)
  plot(nbiomass~generation,b,ylim=c(0,1),
       sub='biomass vs time',pch='.',col=colour)
  plot(nmaxsyn~generation,b,ylim=c(1,1.05),
       sub='maximum synthesis vs time',pch='.',col=colour)
  plot(nminsyn~generation,b,ylim=c(0,1.05),
       sub='minimum synthesis vs time',pch='.',col=colour)
}
@

<<straight_line_verification2,fig.cap='PCA of Pareto Fronts: proportion of variance explained by each component. Log scale'>>=
layout(matrix(1:2,1,2,byrow=F))
for(c in list(GDMO.S, GDMO.M)){
  colour <- switch(unique(as.character(c$strain)),
                   sulfurreducens='red',
                   metallireducens='blue')
  pc<-princomp(c[,c('nbiomass','nminsyn','nmaxsyn')])
  pov<-(pc$sdev)^2 / sum(pc$sdev^2) 
  barplot(pov,
          sub='principle components',
          main=unique(c$strain),
          col=colour,
          ylim=c(1e-20,1),
          log='y'
  )
}
@
Figures~\ref{fig:straight_line_verification1} and~\ref{fig:straight_line_verification2} show a number of graphs that all suggest that there is no bug in the G. Metallireducens model. 
Figure~\ref{fig:straight_line_verification1} shows that the noise levels over time are similar. While there are some differences in minimum synthesis, closer inspection reveals that there is still some variation for G. Metallireducens; and that the difference is not particularly large, considering that only small improvements are at all possible in this objective.
Figure~\ref{fig:straight_line_verification2} shows the principle components of both fronts. 
Both fronts are roughly linear, so the first principle components explain much of the variation, but it in fact explains a slightly smaller proportion of variance in the G. Metallireducens Pareto front.

With further investigation, the reasons behind these differences actually indicate a problem with the G. Sulfurreducens model. 
In both species, we see a tradeoff between use of resources in biomass generation and in electricity production.
However, the G. Sulfurreducens model required the addition of a small number of `vitamins': trace materials in the substrate that were not produced in the metabolism.
These extra resources cannot necessarily be used outside of specific pathways, and so they produce extraneous local features in the Pareto front where they can, or cannot, be used.

% Figures~\ref{fig:metallireducensmax} and~\ref{fig:metallireducensmin} show the Pareto fronts for maximum and minimum synthesis respectively.
% Due to the approximately linear nature of the three dimensional pareto front, these two dimensional projections contain almost all of the same points, since each solution is nondominated in each pair of dimensions.
% 
% <<metallireducensmax,echo=F,out.width='0.4\\textheight',dependson='GDMO_fronts',fig.cap='Pareto front of maximum reduction potential for Geobacter Metallireducens, normalized against wild type'>>=
% plot(nmaxsyn~nbiomass,hm,xlab='biomass',ylab='reduction potential',col='blue')
% @
% 
% <<metallireducensmin,echo=F,out.width='0.4\\textheight',fig.cap='Pareto front of minimum reduction potential for Geobacter Metallireducens, normalized against wild type',dependson='GDMO_fronts'>>=
% plot(nminsyn~nbiomass,lm,xlab='biomass',ylab='reduction potential',col='blue')
% @


\subsubsection{Minimum Synthesis Pattern}
Figure~\ref{fig:minsynMpattern} demonstrates that in the final G.Metallireducens Pareto front, maximum and minimum synthesis are for the most part correlated. However, pushing the maximum synthesis above around \SI{102.5}{\percent} of the wild type value produces a large drop in minimum synthesis. Since reducing minimum synthesis by \SI{20}{\percent} seems an unreasonable sacrifice for an increase in maximum synthesis of only \SI{4}{percent}, these strains are removed from the pareto front from here on.

The ability to understand this kind of tradeoff, and to make this decision after seeing the results, is one of the major advantages of using multi-objective optimization.
<<minsynMpattern, echo=F, dependson=c('GDMO_M'),fig.cap='Minimum synthesis vs maximum synthesis for Geobacter Metallireducens'>>=
plot(nminsyn~nmaxsyn,GDMO.M,ylab='normalized minimum synthesis',xlab='normalized maximum synthesis',col='blue',type='p')
@

<<GDMO_M_chromosomes2,dependson=c('GDMO_S','GDMO_M','GDMO_S','GDMO_M'),cache=TRUE>>=
GDMO.M<-GDMO.M[GDMO.M$nmaxsyn<1.025,]
GDMO.M.chromosomes<-GDMO.M.chromosomes[
  GDMO.M.chromosomes$nmaxsyn<1.025,
  ]
pc<-princomp(GDMO.M.chromosomes[,c('maxsyn','minsyn','biomass')])
GDMO.M.chromosomes$pos<-pc$scores[,1]
@


\subsubsection{Knockout Patterns}
Figure~\ref{fig:geoMknockouts} shows the global knockout pattern in G.Metallireducens at the Pareto front. Strains are ordered by their distance along the first principle component of the objective values (which covers \SI{96}{\percent} of variance), while genes are hierachically clustered, using Manhattan distance. Axis labels are absent for the sake of readability and because neither is individually useful.
<<geoMknockouts, echo=F,  fig.pos='h', dependson=c('GDMO_M_chromosomes2'), fig.cap='Knockouts (blue) in Geobacter Metallireducens'>>=
v=GDMO.M.chromosomes[order(GDMO.M.chromosomes$pos),grep(pattern='Gmet_.*',colnames(GDMO.M.chromosomes))]
heatmap(x=as.matrix(v*1),
        Rowv=NA,
        Colv=NULL,
        labRow=NA,
        labCol=NA,
        ylab='strain, sorted by distance from WT',
        xlab='gene, clustered by Manhattan distance',
        col=c('ghostwhite','blue'),
        scale='none',
        distfun=function(x){dist(x,'manhattan')}
)
@
Here we can see a large number of genes with no knockouts. 
These can loosely be termed essential, but some of them may be essential only given the nutrients available, or necessary for \ce{FE2} excretion.
This forms a larger proportion of the genes visible here than in Sulfurreducens, which may be partly due to the supplementation strategy in Sulfurreducens, but could also be simply due to bias in the derivation of the models.
These reactions were considered to be very bad candidates for increasing electricity producing, and so removed.
<<GDMO_M_nonessential, echo=F, dependson=c('GDMO_M_chromosomes2')>>=
temp_essential <- GDMO.M.chromosomes[,grep(pattern='Gmet_.*',colnames(GDMO.M.chromosomes))]
temp_essential <- names(temp_essential[,colSums(temp_essential)==0])
GDMO.M.nonessential<-GDMO.M.chromosomes[,!names(GDMO.M.chromosomes) %in% temp_essential]
GDMO.M.nonessential<-GDMO.M.nonessential[sort.list(GDMO.M.nonessential$pos),]
@
With the essential genes removed, a far stronger pattern can be seen in the genes knocked out (Figure~\ref{fig:geoMknockoutsnonessential}): among the noise, certain knockouts are only present in high biomass strains
<<geoMknockoutsnonessential, echo=F,  fig.pos='h', dependson=c('GDMO_M_nonessential'), fig.cap='Knockouts (blue) in Geobacter Metallireducens, nonessential reactions only'>>=
v=GDMO.M.nonessential[order(GDMO.M.nonessential$pos),grep(pattern='Gmet_.*',colnames(GDMO.M.nonessential))]
heatmap(x=as.matrix(v*1),
        Rowv=NA,
        Colv=NULL,
        labRow=NA,
        labCol=NA,
        ylab='strain, sorted by distance from WT',
        xlab='gene, clustered by Manhattan distance',
        col=c('ghostwhite','blue'),
        scale='none',
        distfun=function(x){dist(x,'manhattan')}
)
@

These were taken to be those whose presence in a strain is strongly related to the position of that strain in the first principle component of its objectives.
<<geoMKOtrendslinear, fig.pos='h', dependson=c('GDMO_M_nonessential'),fig.scap='Linearly smoothed knockouts',fig.cap='Knockouts for each gene set in the Pareto front for Geobacter Metallireducens, smoothed by a linear model. Larger x-axis numbers have larger biomass production'>>=
plot(NULL,NULL,
     xlab='1st principle component of objectives',
     ylab='knockouts',
     xlim=range(GDMO.M.nonessential$pos),
     ylim=c(0,1)
)
for(k in grep('Gmet_.*',names(GDMO.M.nonessential),value=TRUE)){
  interaction<-GDMO.M.nonessential[,c(k,'pos')]
  interaction.fit<-lm(interaction[[k]]~pos,interaction)
  interaction$smoothed<-predict(interaction.fit)
  lines(smoothed~pos,interaction,col=rgb(0,0,1,0.5))
}
@

Figure~\ref{fig:geoMKOtrendslinear} shows how the presence of gene sets varies with their position in the G. Metallireducens Pareto front. 
The linear model used for smoothing shows that a number of knockouts are common in highly engineered strains (towards the right), but are much less common in high biomass strains. Furthermore, as expected, we can see a general trend towards more knockouts with higher synthesis.

<<geoMKOtrendsloess, fig.pos='h', dependson=c('GDMO_M_nonessential'),fig.scap='Polynomialy smoothed knockouts',fig.cap='Knockouts for each geneset in the Pareto front for Geobacter Metallireducens, smoothed by a polynomial model'>>=
plot(NULL,NULL,
     xlab='1st principle component of objectives',
     ylab='knockouts',
     xlim=range(GDMO.M.nonessential$pos),
     ylim=c(0,1)
)
interesting=NULL
for(k in grep('Gmet_.*',names(GDMO.M.nonessential),value=TRUE)){
  interaction<-GDMO.M.nonessential[GDMO.M.nonessential$pos>-5,
                                   c(k,'pos')
                                   ]
  interaction.fit<-loess(interaction[[k]]~pos,interaction,degree=2)
  interaction$smoothed<-predict(interaction.fit)
  if(nrow(interaction[
    interaction$smoothed>0.65
    &interaction$pos>0
    &interaction$pos<2.8,
    ])>0){
    interesting<-c(interesting,k)
  }
  lines(smoothed~pos,interaction,type='l',col=rgb(0,0,1,0.5))
}
lines(y=c(2,0.65,0.65),x=c(0,0,3),type='l',col='orange')
@

Figure~\ref{fig:geoMKOtrendsloess} shows a similar plot, but with smoothing provided by local regression~\cite{Cleveland1979}.
This figure is able to pick up on more complex behaviours than the linear model, and some lines represent reactions which, when removed, clearly have a large effect on electricity synthesis.

Specifically, the orange box in figure~\ref{fig:geoMKOtrendsloess} shows a number of knockouts of particular interest. These are listed in table~\ref{GDMO_M_popular}
<<GDMO_M_popular, echo=F ,dependson=c('GDMO_S','geoMKOtrendsloess'),results='asis'>>= 
print(xtable(
  GDMO.M.reactions[GDMO.M.reactions$GeneAssociation %in% as.character(interesting),c('OfficialName','SubSystem')],
  caption='Geobacter Metallireducens reactions of interest',
  label='tab:GDMO_M_popular',
  ),include.rownames=FALSE)
@
