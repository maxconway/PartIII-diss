% !TeX root = dissertation.Rnw   
\chapter{Background}
This chapter provides some background information on the biology and computational techniques discussed later. 
Detailed discussion of the specific approaches of the genetic design algorithms under study can be found in the methods chapter.
%ref

\todo{add more biology}

\section{Geobacter}
Geobacter is a genus of anaerobic proteobacteria with a number of possible industrial applications, stemming from their ability to utilize soluble and insoluble metal oxides as electron acceptors. 
The ability to perform these unusual redox reactions could be relevant to bioremediation, both by allowing clean up of hydrocarbon spills in anaerobic conditions, and by fixing oxides of toxic and radioactive metals, such as uranium. 
Furthermore, the ability to utilize insoluble materials as electron acceptors make Geobacter interesting as a candidate for use in bacterial fuel cells with, and without, branes, and the pilli used to connect to transport electrons have applications in themselves, as nanowires.

The first Geobacter species to be isolated was Geobacter Metallireducens, from sandy sediment in the Pontomac River, Washington D.C. in 1987, by Derek Lovley. 
The most studied species is Geobacter Sulfurreducens.
These two species are the ones studied here, via reaction lists with Gene-Protein-Reaction annotations.
These lists contain 609 and 787 reactions for Sulfurreducens and Metallireducens, respectively.
%TODO: cite sources for reaction lists

\section{Metabolic networks and Flux Balance Analysis (FBA)}
The metabolic network of an organism is comprised of the metabolites (small molecules processed in large quantities) of the organism and the enzymes that control the reactions consuming and producing the metabolites. 
The production of these enzymes is not considered part of the metabolome, though their activation or inhibition by metabolites is. 
The metabolome can be characterized at a steady state by the stoichiometric matrix, which is the known ratio of reactants and products, and a flux vector, which is the unknown flux through each reaction. 
While some fluxes in the flux vector can be determined simply by the organism's inability to produce the relevant enzyme, the abundance and activity of those enzymes that the organism can produce are difficult to determine. 

FBA seeks to determine the flux vector at a given time by using the stoichiometric matrix to define a network, with the fluxes forming the edges which must be determined. 
This creates a cone of feasible solutions in flux space, which must be selected from. 
It relies on two assumptions:
\begin{enumerate}
\item \label{itm:steadystate} The metabolome of the organism under study is in a steady state.
\item \label{itm:maxgrowth} The organism produces maximum possible growth for any given combination of resources available and physical constraints.
\end{enumerate}
Assumption \ref{itm:steadystate} allows the system of simultaneous differential equations describing the metabolism to be reduced to a set of simultaneous algebraic equations, since in steady state \(\text{uptake} + \text{production} = \text{consumption} + \text{excretion}\). 
This limits possible rates to the interior of a convex polytope. 
To predict the actual position within this polytope, assumption \ref{itm:maxgrowth} is used, and an optimization technique, typically a linear programming method, such as the Simplex Algorithm~\cite{Dantzig1951}, is used to find the point, or space, representing highest growth.

Of course, many adaptations and extensions to this basic approach are possible. 
In the case of genetic design for overproduction of industrially useful metabolites, Flux Balance Analysis is used to find the region of flex space representing maximal growth. A range of excretion values for the overproduced metabolite may be possible while maintaining maximal growth. Gene knockouts can then be tried, with the goal of moving this possible production range upwards, without reducing biomass accumulation too much.

\section{Genetic design algorithms}
Genetic engineering is very much a fledgling field, with a large amount of trial and error, largely because much of our knowledge in this area is descriptive, via techniques such as knockout studies, rather than predictive. 
This means that while we can try a set of knockouts (or knockins) and find out the result in a real organism, knowing what sets are likely to yield a desired result is difficult, especially since useful results sometimes require several simultaneous alterations to the genome, presenting a very large search space.

Simpler effects, such as overproduction of a particular metabolite, require simpler engineering strategies than the more complex effects desired in synthetic biology. The search space is still far too large to manually characterize, but fortunately, and these metabolome level effects can fortunately also be well modelled by FBA, which works well for large scale, steady state effects such as overproduction, but cannot model dynamic, reactive systems. Since FBA presents a useful computational metabolic model, especially when annotated with gene-protein-reaction data, it allows the development of algorithms that can search through the huge space of possible knockout strategies (around \(2^700)\) in the E. Coli models used here), in order to draft strategies for \emph{in-vitro} evaluation.

\section{Optimization}

Optimization problems generally consist of a multidimensional decision space, a scalar objective and an objective function which maps each position in decision space to a position in objective space. 
Optimization algorithms then search decision space for a position that maximizes or minimizes the objective. 

\subsection{Multi-objective optimization}
\label{subsec:moo}

Many objective functions naturally map to a multidimensional objective space, rather than to a scalar value, as is used in classic optimization. 
One method to deal with this is to use, for instance, a linear sum to map to a scalar objective, but this requires coefficients that are often difficult to find. 
Utilizing multi-objective optimization~\cite{Gen2008} instead allows us to maximize directly in objective space, and thus avoid making value judgements between different objective dimensions. 
This requires a different notion of superiority, called Pareto dominance. 
A solution \(A\) Pareto dominates \(B\) if \(A\) is better than \(B\) in all ways. 
\(A\) is Pareto optimal if no solution Pareto dominates it. 

%TODO work out some standardized notation for pareto dominance

However, it should be noted that Pareto dominance does not provide a total order: it cannot necessarily provide a single best solution, only a non-dominated set; this makes evolutionary algorithms particularly appropriate, since they inherently involve keeping a population of solutions.

Multi-objective optimization is particularly relevant to investigating evolvability, since solutions will need to quickly move in the Pareto front to follow the perfect trade-off, but will need to minimize the time spent behind the front. 
This highlights that mutation is more beneficial in some directions than others.

\subsection{Evolutionary algorithms}
\label{subsec:ea}

Evolutionary algorithms are one class of optimization algorithm. Characteristics which they share include:
\begin{itemize}
\item Evolutionary algorithms work on a population of solutions. 
\item Selection phases are used, where bad solutions are discarded.
\item Mutation/reproduction phases are used, where new solutions are generated based on previous solutions. 
\end{itemize}

One advantage of these algorithms is that they do not require their decision space to be differentiable, and hence can work in noisy decision spaces or those that contain discontinuities. 
It is important to note that while evolutionary optimization algorithms are biologically inspired, they are not generally intended as models of real biology, but rather to be used as black-box optimization algorithms in exactly the same way as the metallurgically inspired simulated annealing.